import{_ as i,c as e,b as a,o as n}from"./app-DKCKVlii.js";const l={};function t(d,s){return n(),e("div",null,s[0]||(s[0]=[a(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>RARE (Retrieval-Augmented Reasoning Modeling) 是一种新颖的训练范式，其核心思想在于<strong>将知识存储与推理优化相解耦</strong>。RARE 将领域知识外化至可检索的外部数据源，训练过程中专注于内化领域特定的推理模式。具体而言，通过将检索到的知识注入训练提示中，RARE 将模型的学习目标从对事实的死记硬背转变为基于上下文的推理。这种方法使模型能够绕过参数密集的知识记忆过程，优先发展和优化更高阶的认知与推理能力。我们精心设计并<strong>自研</strong>了新的算子集，其标记含义如下：</p><ul><li>🚀 <strong>自主创新</strong>：核心算法原创研发，填补现有算法空白或是进一步提升性能，突破当下性能瓶颈。</li><li>✨ <strong>开源首发</strong>：首次将该算子集成到社区主流框架中，方便更多开发者使用，实现开源共享。</li></ul><h2 id="rare-算子" tabindex="-1"><a class="header-anchor" href="#rare-算子"><span>RARE 算子</span></a></h2><p>RARE 算子流程通过三个核心步骤，系统性地生成用于推理能力训练的合成数据。</p><table class="tg"><thead><tr><th class="tg-0pky">名称</th><th class="tg-0pky">应用类型</th><th class="tg-0pky">描述</th><th class="tg-0pky">官方仓库或论文</th></tr></thead><tbody><tr><td class="tg-0pky">Doc2Query✨</td><td class="tg-0pky">问题生成</td><td class="tg-0pky">基于原始文档，生成需要复杂推理才能解答的问题和相应场景。</td><td class="tg-0pky">ReasonIR: Training Retrievers for Reasoning Tasks</td></tr><tr><td class="tg-0pky">BM25HardNeg✨</td><td class="tg-0pky">困难负例挖掘</td><td class="tg-0pky">为生成的问题挖掘文本相似但语义不相关的困难负样本，构建具有挑战性的检索上下文。</td><td class="tg-0pky">ReasonIR: Training Retrievers for Reasoning Tasks</td></tr><tr><td class="tg-0pky">ReasonDistill🚀</td><td class="tg-0pky">推理过程生成</td><td class="tg-0pky">结合问题、正负文档，提示大语言模型生成详尽的推理过程，以“蒸馏”其领域思维模式。</td><td class="tg-0pky">RARE: Retrieval-Augmented Reasoning Modeling</td></tr></tbody></table><h2 id="算子接口使用说明" tabindex="-1"><a class="header-anchor" href="#算子接口使用说明"><span>算子接口使用说明</span></a></h2><p>对于指定存储路径或调用模型的算子，我们提供了封装好的<strong>模型接口</strong>和<strong>存储对象接口</strong>。你可以通过如下方式为算子预定义模型 API 参数：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> dataflow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">llmserving </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> APILLMServing_request</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">api_llm_serving </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> APILLMServing_request</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                api_url</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">your_api_url</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                model_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">model_name</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                max_workers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以通过如下方式为算子预定义存储参数：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>from dataflow.utils.storage import FileStorage</span></span>
<span class="line"><span></span></span>
<span class="line"><span> self.storage = FileStorage(</span></span>
<span class="line"><span>            first_entry_file_name=&quot;your_file_path&quot;,</span></span>
<span class="line"><span>            cache_path=&quot;./cache&quot;,</span></span>
<span class="line"><span>            file_name_prefix=&quot;dataflow_cache_step&quot;,</span></span>
<span class="line"><span>            cache_type=&quot;json&quot;, # jsonl, json, ...</span></span>
<span class="line"><span>        )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下文中的 <code>api_llm_serving</code> 和 <code>self.storage</code> 即为此处定义的接口对象。完整的使用示例可见 <code>rare_pipeline.py</code>。</p><p>参数传递方面，算子对象的构造函数主要传递与算子配置相关的信息（如 <code>llm_serving</code> 实例），可一次配置多次调用；而 <code>X.run()</code> 函数则传递与 IO 相关的 <code>key</code> 信息和运行时参数。具体细节可见下方算子描述示例。</p><h2 id="算子详细说明" tabindex="-1"><a class="header-anchor" href="#算子详细说明"><span>算子详细说明</span></a></h2><h3 id="_1-doc2query" tabindex="-1"><a class="header-anchor" href="#_1-doc2query"><span>1. Doc2Query</span></a></h3><p><strong>功能描述</strong></p><p>该算子是 RARE 数据生成流程的第一步。它利用大语言模型，为给定的文档片段生成一个独立的、需要深入推理才能解答的问题，并附带一个完整的场景描述。生成的问题旨在脱离原文也能被理解，考验模型的综合推理能力而非简单的信息抽取。</p><p><strong>输入参数</strong></p><ul><li><code>__init__()</code><ul><li><code>llm_serving</code>: 使用的大语言模型接口对象（<code>LLMServingABC</code> 类型）。</li></ul></li><li><code>run()</code><ul><li><code>storage</code>: 存储接口对象。</li><li><code>input_key</code>: 输入文档内容的字段名（默认：&quot;text&quot;）。</li><li><code>output_question_key</code>: 输出生成问题的字段名（默认：&quot;question&quot;）。</li><li><code>output_scenario_key</code>: 输出生成场景的字段名（默认：&quot;scenario&quot;）。</li><li><code>max_attempts</code>: 解析失败时，为单一样本重新调用大模型的最大尝试次数（默认：3）。</li></ul></li></ul><p><strong>使用示例</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>from dataflow.operators.generate.RARE import Doc2Query</span></span>
<span class="line"><span></span></span>
<span class="line"><span>doc2query_step = Doc2Query(llm_serving=api_llm_serving)</span></span>
<span class="line"><span>doc2query_step.run(</span></span>
<span class="line"><span>    storage = self.storage.step(),</span></span>
<span class="line"><span>    input_key = &quot;text&quot;,</span></span>
<span class="line"><span>    output_question_key = &quot;question&quot;,</span></span>
<span class="line"><span>    output_scenario_key = &quot;scenario&quot;</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-bm25hardneg" tabindex="-1"><a class="header-anchor" href="#_2-bm25hardneg"><span>2. BM25HardNeg</span></a></h3><p><strong>功能描述</strong></p><p>该算子利用经典的 BM25 算法，为每个“问题-正面文档”对，从整个文档库中检索并筛选出最相关的困难负样本。这些负样本在词汇上与查询高度相似，但在语义上是错误的或不相关的答案，旨在构建一个具有挑战性的检索环境，迫使模型在后续步骤中进行更精细的推理和辨别。</p><p><strong>依赖安装</strong></p><p>BM25HardNeg算子依赖于pyserini, gensim和JDK。Linux配置方法如下：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> apt</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> openjdk-21-jdk</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pip</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pyserini</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gensim</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><ul><li><code>__init__()</code><ul><li>无构造参数。</li></ul></li><li><code>run()</code><ul><li><code>storage</code>: 存储接口对象。</li><li><code>input_question_key</code>: 输入问题的字段名（默认：&quot;question&quot;）。</li><li><code>input_text_key</code>: 输入正面文档内容的字段名（默认：&quot;text&quot;）。</li><li><code>output_negatives_key</code>: 输出困难负样本列表的字段名（默认：&quot;hard_negatives&quot;）。</li><li><code>num_neg</code>: 为每个查询挖掘的困难负样本数量（默认：3）。</li></ul></li></ul><p><strong>使用示例</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>from dataflow.operators.generate.RARE import BM25HardNeg</span></span>
<span class="line"><span></span></span>
<span class="line"><span>bm25hardneg_step = BM25HardNeg()</span></span>
<span class="line"><span>bm25hardneg_step.run(</span></span>
<span class="line"><span>    storage = self.storage.step(),</span></span>
<span class="line"><span>    input_question_key = &quot;question&quot;,</span></span>
<span class="line"><span>    input_text_key = &quot;text&quot;,</span></span>
<span class="line"><span>    output_negatives_key = &quot;hard_negatives&quot;,</span></span>
<span class="line"><span>    num_neg = 3</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-reasondistill" tabindex="-1"><a class="header-anchor" href="#_3-reasondistill"><span>3. ReasonDistill</span></a></h3><p><strong>功能描述</strong></p><p>该算子是 RARE 范式的核心实现。它将 <code>Doc2Query</code> 生成的问题和场景、原始的正面文档以及 <code>BM25HardNeg</code> 挖掘出的困难负例整合在一起，构建一个复杂的上下文。然后，它提示大语言模型（教师模型）基于此上下文生成一个详尽的、分步的推理过程。这个过程旨在“蒸馏”出大模型的领域思维模式（domain thinking），并生成用于训练学生模型的数据，使其学会如何进行上下文推理（contextualized reasoning）而非依赖参数化知识。</p><p><strong>输入参数</strong></p><ul><li><code>__init__()</code><ul><li><code>llm_serving</code>: 使用的大语言模型接口对象（<code>LLMServingABC</code> 类型）。</li></ul></li><li><code>run()</code><ul><li><code>storage</code>: 存储接口对象。</li><li><code>input_text_key</code>: 输入正面文档的字段名（默认：&quot;text&quot;）。</li><li><code>input_question_key</code>: 输入问题的字段名（默认：&quot;question&quot;）。</li><li><code>input_scenario_key</code>: 输入场景的字段名（默认：&quot;scenario&quot;）。</li><li><code>input_hardneg_key</code>: 输入困难负样本列表的字段名（默认：&quot;hard_negatives&quot;）。</li><li><code>output_key</code>: 输出生成推理过程的字段名（默认：&quot;reasoning&quot;）。</li></ul></li></ul><p><strong>使用示例</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>from dataflow.operators.generate.RARE import ReasonDistill</span></span>
<span class="line"><span></span></span>
<span class="line"><span>reasondistill_step = ReasonDistill(llm_serving=api_llm_serving)</span></span>
<span class="line"><span>reasondistill_step.run(</span></span>
<span class="line"><span>    storage = self.storage.step(),</span></span>
<span class="line"><span>    input_text_key = &quot;text&quot;,</span></span>
<span class="line"><span>    input_question_key = &quot;question&quot;,</span></span>
<span class="line"><span>    input_scenario_key = &quot;scenario&quot;,</span></span>
<span class="line"><span>    input_hardneg_key = &quot;hard_negatives&quot;,</span></span>
<span class="line"><span>    output_key = &quot;reasoning&quot;</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38)]))}const r=i(l,[["render",t]]),o=JSON.parse('{"path":"/zh/guide/RARE_operators/","title":"RARE算子","lang":"zh-CN","frontmatter":{"title":"RARE算子","createTime":"2025/06/24 11:43:42","permalink":"/zh/guide/RARE_operators/"},"readingTime":{"minutes":5.11,"words":1532},"git":{"createdTime":1750777722000,"updatedTime":1752240502000,"contributors":[{"name":"Hao Liang","username":"","email":"hao.liang@stu.pku.edu.cn","commits":1,"avatar":"https://gravatar.com/avatar/105bae3e8661728b9f2f5440992b04f5f28459b66a049d09b52213ce1438f6bc?d=retro"},{"name":"mi-iro","username":"mi-iro","email":"wzr@stu.pku.edu.cn","commits":2,"avatar":"https://avatars.githubusercontent.com/mi-iro?v=4","url":"https://github.com/mi-iro"}]},"filePathRelative":"zh/notes/guide/domain_specific_operators/rare_operators.md","headers":[]}');export{r as comp,o as data};
